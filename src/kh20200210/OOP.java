package kh20200210;

public class OOP {

	public static void main(String[] args) {

		
		// 객체 지향 프로그래밍
		// OOP, Object Oriented Programming
		
		// 객체들의 상호작용(데이터 전달)을 통해 프로그램이 동작하도록
		// 작성하는 프로그래밍 기법.
		
		// 객체(Object)
		// 프로그램에서 구현하고자 하는 모든 대상
		// 현실세계에 존재하는 모든 것들
		
		// 예를 들어 '사람'
		// 이름, 나이, 발 사이즈, 키, 몸무게, 혈액형, 출신 초등학교, 취미...)
		// ----> 코드화 해서 변경 시킨것을 Class 라고 한다.
		// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
		
//		class Person {
//			String Name;
//			int age;
//		}
		
		// ----> 인스턴스(객체) 생성
		// 인스턴스, 객체라고도 부르는데 객체라고 더 많이 부른다.
		// 클래스 정의 코드를 통해서 생성된 객체.
		// 메모리에 생성된 객체.
				
		// 인스턴스화, Instanciate
		// 실체화
		// 메모리(RAM)에 실체화 하는 작업.
		// 클래스 정의코드를 통해 메모리에 실제 저장 공간을 생성하는 일 (new 연산자 사용)
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		//			Class.java						똑같은 설계도로 			Main.java
		//			설계도(건물)				여러개의 건물을 만든다.			메인클래스(인스턴스, 실체화 된 객체)
		//			설계도를 만든다.				------------->				설계도를 기반으로 실체화한다.
		//									그러나 안에 들어가는 부속품은
		//									다르게 설정하여 만들 수 있다.
		/////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// 접근제한자. Access Modifier
		// 목적 : 객체의 고유한 속성(멤버 필드), 동작(멤버 메소드)에 대한 정의들을
		// 객체의 외부에 함부로 공개되지 않도록 하기 위해 동작한다.
		// 객체의 멤버들은 프로그램을 구성하는 중요한 정보를 담고 있기 때문에 
		// 객체의 외부에서 함부로 변경하도록 놔두면 프로그램에 악영향을 끼칠 수 있다.
		
		// 그러므로, 접근제한자를 사용하여 공개범위를 설정한다.
		// private, public, protected, default(package)
		// private : 해당 클래스 내에서만 접근을 허용한다.											// ↓↓↓
		// default(package) : 같은 패키지내에서 접근 가능.											// ↓↓↓	순으로
		// protected : 우선 같은 패키지면 접근 가능하며, 상속을 받은 객체에서 접근 가능하다. 		// ↓↓↓	공개범위가
		// public : 모든 접근을 허용한다.															// ↓↓↓	넓어진다.

		// 멤버 필드 : 4개 전부 가능하지만 자주 쓰이는 것 ; private
		// 멤버 메소드 : 4개 전부 가능하지만 자주 쓰는 것 ; public
		
		// 클래스 정의 : public, default 2가지만 가능
		
		// 정보 은닉 (Information Hiding)
		// 객체 지향 프로그래밍 중 지켜야할 법칙중 하나.
		// 접근 제한자를 이용하여 구현한다.
		// 객체(클래스)의 중요한 정보를 함부로 공개되지 않도록 관리한다.
	
		
//		Person p1;
//		p1.name = "개똥이";
//		p1.age = 26;
//		
//		Person p2;
//		p2.name = "말똥이";
//		p2.age = 30;
//		
//		Person p2;
//		p2.name = "소똥이";
//		p2.age = 44;
			
		
		// 정리
		// 객체(Object)
		// 프로그램에서 구현하고자하는 모든 대상 현실 세계에 존재하는 모든 것
		
		// 클래스(Class)
		// 객체의 정보 중 프로그램에서 필요로 하는 것들만 코드화한 것, 객체를 추상화한 것
		
		// ** 중요
		// ** 추상화 (Abstraction)
		// 현실 세계의 대상을 나타내는 객체의 공통으로 존재하는 속성, 기능, 행위등을
		// '개념화' 하는 작업.
		//  -> 프로그램에서 필요로 하는 것들만 꺼내는 작업.
		
		
		
		
	}
}